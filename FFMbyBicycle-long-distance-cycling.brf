# This bike profile will avoid
# - car traffic
# - turns
# - elevation
# - steps
# - traffic lights/stop signs
# - bad surfaces
# by default. The route may NOT be the shortest, but the most relaxed and should be ridable with all kind of bikes at an steady speed. It is designed to work on long distance tracks, but also generates good routes in cities.

#
# Please note that this complex profile needs more time to calculate than a lot of the others around, especially in larger cities - but it is worth it ;-)
#

---context:global   # following code refers to global config

# Bike profile
assign validForBikes = true

# Use the following switches to change behaviour
assign allow_steps              = false # %allow_steps% | Set to false to disallow steps | boolean
assign allow_ferries            = true # %allow_ferries% | set to false to disallow ferries | boolean
assign ignore_cycleroutes       = true # %ignore_cycleroutes% | Set to true for better elevation results | boolean
assign stick_to_cycleroutes     = false # %stick_to_cycleroutes% | Set to true to just follow cycleroutes | boolean
assign avoid_unsafe             = false # %avoid_unsafe% | Set to true to avoid standard highways | boolean
assign considerTurnRestrictions = true # %considerTurnRestrictions% | Set to true to take turn restrictions into account | boolean
assign processUnusedTags        = false # %processUnusedTags% | Set to true to output unused tags in data tab | boolean
assign consider_traffic         = true # %consider_traffic% | Set to true to avoid traffic | boolean

# Change elevation parameters
assign consider_elevation = true  # %consider_elevation% | Set to false to ignore elevation in routing | boolean
assign downhillcost       = 80    # %downhillcost% | Cost for going downhill | number
assign downhillcutoff     = 1.5   # %downhillcutoff% | Gradients below this value in percents are not counted. | number
assign uphillcost         = 50     # %uphillcost% | Cost for going uphill | number
assign uphillcutoff       = 1.5   # %uphillcutoff% | Gradients below this value in percents are not counted.  | number

assign downhillcost       = if consider_elevation then downhillcost else 0
assign uphillcost         = if consider_elevation then uphillcost else 0

# Kinematic model parameters (travel time computation)
assign totalMass  = 110     # %totalMass% | Mass (in kg) of the bike + biker, for travel time computation | number
assign maxSpeed   = 40     # %maxSpeed% | Absolute maximum speed (in km/h), for travel time computation | number
assign S_C_x      = 0.225  # %S_C_x% | Drag coefficient times the reference area (in m^2), for travel time computation | number
assign C_r        = 0.01   # %C_r% | Rolling resistance coefficient (dimensionless), for travel time computation | number
assign bikerPower = 110    # %bikerPower% | Average power (in W) provided by the biker, for travel time computation | number

# Turn instructions settings
assign turnInstructionMode          = 3     # %turnInstructionMode% | Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style]
assign turnInstructionCatchingRange = 50    # %turnInstructionCatchingRange% | Within this distance (in m) several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts   = true  # %turnInstructionRoundabouts% | Set to "false" to avoid generating special turning instructions for roundabouts | boolean


---context:way   # following code refers to way-tags

# classifier constants
assign classifier_none  = 1
assign classifier_ferry = 2

#
# pre-calculate some logical expressions
#

assign any_cycleroute =
     if      route_bicycle_icn=yes then true
     else if route_bicycle_ncn=yes then true
     else if route_bicycle_rcn=yes then true
     else if route_bicycle_lcn=yes then true
     else false

assign nodeaccessgranted =
     if any_cycleroute then true
     else lcn=yes

assign is_ldcr =
     if ignore_cycleroutes then false
     else any_cycleroute

assign hascycleway = if ( not and ( or cycleway= cycleway=no|none ) and ( or cycleway:left= cycleway:left=no ) and ( or cycleway:right= cycleway:right=no ) ( cycleway=both ) ) then 0 else 1
assign isbike = or bicycle_road=yes or bicycle=yes or bicycle=permissive or bicycle=designated or lcn=yes or highway=cycleway hascycleway
assign ispaved = surface=paved|asphalt|concrete|sett|wood|paving_stones
assign isunpaved = surface=unpaved|compacted|gravel|pebblestone|ground|dirt|grass|mud|sand|cobblestone|fine_gravel|earth # List of surfaces which will be avoided
assign probablyGood = or ispaved and ( or isbike highway=footway ) not isunpaved
assign ishighspeed = maxspeed=70|80|90|100|110|120|130 # Avoid streets with high speed car traffic and no cycling infrastructure

#
# this is the cost (in Meter) for a 90-degree turn
# The actual cost is calculated as turncost*cos(angle)
# (Suppressing turncost while following longdistance-cycleways
# makes them a little bit more magnetic)
#
assign turncost = if is_ldcr then 0
                  else if junction=roundabout then 0
                  else 150 # 150 is quite high but will allow a more straight route at the cost of a longer route. Still saves time and energy because of missing slowdowns at turns


#
# for any change in initialclassifier, initialcost is added once
#
assign initialclassifier =
     if route=ferry then classifier_ferry
     else classifier_none


#
# calculate the initial cost
# this is added to the total cost each time the costfactor
# changed
#
assign initialcost =
     if ( equal initialclassifier classifier_ferry ) then 10000
     else 0

#
# implicit access here just from the motorroad tag
# (implicit access rules from highway tag handled elsewhere)
#
assign defaultaccess =
       if access= then not motorroad=yes
       else if access=private|no then false
       else true

#
# calculate logical bike access
#
assign bikeaccess =
       if any_cycleroute then true
       else if bicycle= then
       (
         if bicycle_road=yes then true
         else if vehicle= then ( if highway=footway then false else defaultaccess )
         else not vehicle=private|no
       )
       # Avoid footways with "Radverkehr frei" (Germany), which in most cases are quite narrow and not eligible for riding your normal speed
       else if and highway=footway bicycle=yes then false
       else not bicycle=private|no|dismount

#
# calculate logical foot access
#
assign footaccess =
       if bikeaccess then true
       else if bicycle=dismount then true
       else if foot= then defaultaccess
       else not foot=private|no

#
# if not bike-, but foot-acess, add a high penalty to avoid them (9000 to still be able to access if there is no other choice!), otherwise access is forbidden
#
assign accesspenalty =
       if bikeaccess then 0
       else if footaccess then 9000
       else 10000

#
# Nearly forbid usage of oneway ways in the wrong direction, except for two-way cycleways
#
assign badoneway =
       if reversedirection=yes then
         if oneway:bicycle=yes then true
         else if oneway= then junction=roundabout
         else oneway=yes|true|1
       else oneway=-1

assign onewaypenalty =
       if ( badoneway ) then
       (
         if ( cycleway=opposite|opposite_lane|opposite_track ) then 0
         else if ( oneway:bicycle=no                         ) then 0
         else if ( highway=primary|primary_link              ) then 500
         else if ( highway=secondary|secondary_link          ) then 300
         else if ( highway=tertiary|tertiary_link            ) then 200
         else 100.0
       )
       else 0.0

#
# calculate the cost-factor, which is the factor
# by which the distance of a way-segment is multiplied
# to calculate the cost of that segment. The costfactor
# must be >=1 and it's supposed to be close to 1 for
# the type of way the routing profile is searching for
#
assign hascycleway = not
  and ( or cycleway= cycleway=no|none ) and ( or cycleway:left= cycleway:left=no ) ( or cycleway:right= cycleway:right=no )

#
# Add traffic penalty for ways with high car traffic
# See https://forum.openstreetmap.org/viewtopic.php?id=31044 for more information
#
assign trafficpenalty0 =
    if highway=primary|primary_link then
    (
      if      estimated_traffic_class=4 then 0.2
      else if estimated_traffic_class=5 then 0.4
      else if estimated_traffic_class=6|7 then 0.6
      else 0
    )
    else if highway=secondary|secondary_link then
    (
      if      estimated_traffic_class=3 then 0.2
      else if estimated_traffic_class=4 then 0.4
      else if estimated_traffic_class=5 then 0.6
      else if estimated_traffic_class=6|7 then 1
      else 0
    )
    else if highway=tertiary|tertiary_link then
    (
      if      estimated_traffic_class=2 then 0.1
      else if estimated_traffic_class=3 then 0.3
      else if estimated_traffic_class=4 then 0.5
      else if estimated_traffic_class=5|6|7 then 1
      else 0
    )
    else 0

assign trafficpenalty =
  if consider_traffic then
  (
    if hascycleway then min 0.3 trafficpenalty0
    else trafficpenalty0
  )
  else 0

assign smoothness_penalty =
    if smoothness=excellent|very_good|good                    then 0.0 else
    if smoothness=intermediate                                then 0.5 else
    if smoothness=bad|robust_wheels|very_bad|high_clearance|horrible|off_road_wheels|very_horrible|impassable then 50.0 else
    0.0

assign costfactor

  #
  # exclude rivers, rails etc.
  #
  if ( and highway= not route=ferry ) then 10000

  #
  # exclude motorways and proposed roads
  #
  else if ( highway=motorway|motorway_link ) then   10000
  else if ( highway=proposed|abandoned     ) then   10000

  #
  # all other exclusions below (access, steps, ferries,..)
  # should not be deleted by the decoder, to be available
  # in voice-hint-processing
  #
  else min 9999

  #
  # apply oneway-and access-penalties
  #
  add max onewaypenalty accesspenalty

  # Add trafficpenalty
  add trafficpenalty

  add smoothness_penalty

  #
  # steps and ferries are special. Note this is handled
  # before the cycleroute-switch, to be able
  # to really exlude them be setting cost to infinity
  #
  if ( highway=steps ) then ( if allow_steps then 40 else 10000 )
  else if ( route=ferry   ) then ( if allow_ferries then 5.67 else 10000 )

  #
  # handle long-distance cycle-routes.
  #
  else if ( is_ldcr ) then 1                   # always treated as perfect (=1)
  else
  add ( if stick_to_cycleroutes then 0.5 else 0.05 )  # everything else somewhat up

  #
  # some other highway types
  #
  if      ( highway=pedestrian                         ) then 5
  else if ( highway=bridleway                          ) then ( if isunpaved then 200 else 10 )
  else if ( highway=cycleway                           ) then ( if isunpaved then 200 else 1.0 )
  else if ( highway=residential                        ) then ( if isunpaved then 200 else 1.1 )
  else if ( highway=service                            ) then ( if isunpaved then 200 else 1.2 )
  else if ( or highway=living_street living_street=yes ) then ( if isunpaved then 200 else 2.5 )
  else if ( highway=construction                       ) then 200

  #
  # tracks and track-like ways are rated mainly be tracktype/grade
  # But note that if no tracktype is given (mainly for road/path/footway)
  # it can be o.k. if there's any other hint for quality
  #
  else if ( highway=track|road|path|footway ) then
  (
    if      ( tracktype=grade1 ) then ( if probablyGood then 1.0 else 1.3 )
    else if ( tracktype=grade2 ) then ( if probablyGood then 1.1 else 2.0 )
    else if ( tracktype=grade3 ) then ( if isunpaved then 200 else 10.0 )
    else if ( tracktype=grade4 ) then ( if isunpaved then 200 else 15.0 )
    else if ( tracktype=grade5 ) then ( if isunpaved then 200 else 20.0 )
    else                              ( if isunpaved then 200 else if probablyGood then 1.1 else 3.0 )
  )

  #
  # When avoiding unsafe ways, avoid highways without a bike hint
  #
  else add ( if ( and avoid_unsafe not isbike ) then 2 else 0 )

  #
  # actuals roads are o.k. if we have a bike hint and if there is no highspeed car traffic
  #
       if ( highway=trunk|trunk_link         ) then ( if isbike then 1.5 else if ishighspeed then 7 else 5 )
  else if ( highway=primary|primary_link     ) then ( if isbike then 1.3 else if ishighspeed then 4 else 1.5 )
  else if ( highway=secondary|secondary_link ) then ( if isbike then 1.1 else if ishighspeed then 3 else 1.4 )
  else if ( highway=tertiary|tertiary_link   ) then ( if isbike then 1.0 else if ishighspeed then 2 else 1.3 )
  else if ( highway=unclassified             ) then ( if isbike then 1.0 else if ishighspeed then 2 else 1.1 )
  else if ( highway=construction             ) then ( if isbike then 1.0 else 1.1 )

  #
  # default for any other highway type not handled above
  #
  else 2.0


# way priorities used for voice hint generation

assign priorityclassifier =

  if      ( highway=motorway                          ) then  30
  else if ( highway=motorway_link                     ) then  29
  else if ( highway=trunk                             ) then  28
  else if ( highway=trunk_link                        ) then  27
  else if ( highway=primary                           ) then  26
  else if ( highway=primary_link                      ) then  25
  else if ( highway=secondary                         ) then  24
  else if ( highway=secondary_link                    ) then  23
  else if ( highway=tertiary                          ) then  22
  else if ( highway=tertiary_link                     ) then  21
  else if ( highway=unclassified                      ) then  20
  else if ( or highway=living_street living_street=yes ) then  6
  else if ( highway=service                           ) then  6
  else if ( highway=cycleway                          ) then  6
  else if ( or bicycle=designated bicycle_road=yes    ) then  6
  else if ( highway=track                             ) then if tracktype=grade1 then 6 else 4
  else if ( highway=bridleway|road|path|footway       ) then  4
  else if ( highway=steps                             ) then  2
  else if ( highway=pedestrian                        ) then  2
  else 0

# some more classifying bits used for voice hint generation...

assign isbadoneway = not equal onewaypenalty 0
assign isgoodoneway = if reversedirection=yes then oneway=-1
                      else if oneway= then junction=roundabout else oneway=yes|true|1
assign isroundabout = junction=roundabout
assign islinktype = highway=motorway_link|trunk_link|primary_link|secondary_link|tertiary_link
assign isgoodforcars = if greater priorityclassifier 6 then true
                  else if ( or or highway=living_street living_street=yes highway=service ) then true
                  else if ( and highway=track tracktype=grade1 ) then true
                  else false

# ... encoded into a bitmask

assign classifiermask add          isbadoneway
                      add multiply isgoodoneway   2
                      add multiply isroundabout   4
                      add multiply islinktype     8
                          multiply isgoodforcars 16

# include `smoothness=` tags in the response's WayTags for track analysis
assign dummyUsage = smoothness=

---context:node  # following code refers to node tags

assign   initial_cost_node    0

assign defaultaccess =
       if ( access= ) then true # add default barrier restrictions here!
       else if ( access=private|no ) then false
       else true

assign bikeaccess =
       if nodeaccessgranted=yes then true
       else if bicycle= then
       (
         if vehicle= then defaultaccess
         else not vehicle=private|no
       )
       else not bicycle=private|no|dismount

assign footaccess =
       if bicycle=dismount then true
       else if foot= then defaultaccess
       else not foot=private|no

#
# Avoid traffic signals and stop signs
#
assign initialcost =
       add ( if highway=traffic_signals then 120
         else if highway=stop then 50
         else if and highway=crossing bicycle=no then 60
         else if and highway=crossing crossing=no then 300 # workaround affecting road routing
         else initial_cost_node )
       if bikeaccess then 0
       else ( if footaccess then 100 else 1000000 )
