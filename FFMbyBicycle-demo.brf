# This bike profile should only be used for cycling demonstrations which are covered by local police authoritie.
#
# OTHER USAGE MAY PUT YOU IN DANGER
#

---context:global   # following code refers to global config

# Bike profile
assign validForBikes = true

# Use the following switches to change behaviour
assign allow_badoneway          = true # %allow_badoneway% | Unset to forbid usage of streets in the wrong direction, should be okay if police is with you | boolean
assign allow_motorway           = false # %allow_motorway% | Set to true to allow cycling on motorways | boolean
assign maxSpeed                 = 14   # %maxSpeed% | Absolute maximum speed (in km/h), for travel time computation | number
assign bikerPower               = 70   # %bikerPower% | Average power (in W) provided by the biker, for travel time computation | number

assign allow_steps              = false # %allow_steps% | Set to false to disallow steps | boolean
assign allow_ferries            = false # %allow_ferries% | set to false to disallow ferries | boolean
assign considerTurnRestrictions = false # %considerTurnRestrictions% | Set to true to take turn restrictions into account | boolean
assign processUnusedTags        = true # %processUnusedTags% | Set to true to output unused tags in data tab | boolean
assign consider_traffic         = false # %consider_traffic% | Set to true to avoid traffic | boolean

# Change elevation parameters
assign consider_elevation = true  # %consider_elevation% | Set to false to ignore elevation in routing | boolean
assign downhillcost       = 80    # %downhillcost% | Cost for going downhill | number
assign downhillcutoff     = 1.5   # %downhillcutoff% | Gradients below this value in percents are not counted. | number
assign uphillcost         = 50     # %uphillcost% | Cost for going uphill | number
assign uphillcutoff       = 1.5   # %uphillcutoff% | Gradients below this value in percents are not counted.  | number

assign downhillcost       = if consider_elevation then downhillcost else 0
assign uphillcost         = if consider_elevation then uphillcost else 0

# Kinematic model parameters (travel time computation)
assign totalMass  = 110     # %totalMass% | Mass (in kg) of the bike + biker, for travel time computation | number
assign S_C_x      = 0.225  # %S_C_x% | Drag coefficient times the reference area (in m^2), for travel time computation | number
assign C_r        = 0.01   # %C_r% | Rolling resistance coefficient (dimensionless), for travel time computation | number

# Turn instructions settings
assign turnInstructionMode          = 3     # %turnInstructionMode% | Mode for the generated turn instructions | [0=none, 1=auto-choose, 2=locus-style, 3=osmand-style]
assign turnInstructionCatchingRange = 50    # %turnInstructionCatchingRange% | Within this distance (in m) several turning instructions are combined into one and the turning angles are better approximated to the general direction | number
assign turnInstructionRoundabouts   = true  # %turnInstructionRoundabouts% | Set to "false" to avoid generating special turning instructions for roundabouts | boolean


---context:way   # following code refers to way-tags

# classifier constants
assign classifier_none  = 1
assign classifier_ferry = 2

#
# pre-calculate some logical expressions
#

assign hascycleway = if ( and ( or cycleway= cycleway=no|none ) and ( or cycleway:left= cycleway:left=no ) ( or cycleway:right= cycleway:right=no ) ) then 0 else 1
assign isbike = or bicycle=yes or bicycle=permissive or bicycle=designated or lcn=yes hascycleway
assign ispaved = or surface=paved|asphalt|concrete|wood|paving_stones|metal or cycleway:surface=paved|asphalt|concrete|paving_stones ( and surface=concrete concrete=plates|lanes ) # surface=concrete concrete=plates|lanes is an alias for surface=concrete:plates / surface=concrete:lanes, see also https://github.com/abrensch/brouter/issues/61
assign isunpaved = or surface=unpaved|compacted|gravel|pebblestone|ground|dirt|grass|mud|sand|sett|cobblestone|fine_gravel|earth|grass_paver cycleway:surface=unpaved|compacted|gravel|sett|cobblestone|fine_gravel
assign probablyGood = or ispaved and ( or isbike highway=footway ) ( or not isunpaved surface=compacted )

#
# this is the cost (in Meter) for a 90-degree turn
# The actual cost is calculated as turncost*cos(angle)
# (Suppressing turncost while following longdistance-cycleways
# makes them a little bit more magnetic)
#
assign turncost = if junction=roundabout then 20
                  else 250

#
# for any change in initialclassifier, initialcost is added once
#
assign initialclassifier =
     if route=ferry then classifier_ferry
     else classifier_none

#
# calculate the initial cost
# this is added to the total cost each time the costfactor
# changed
#
assign initialcost =
     if ( equal initialclassifier classifier_ferry ) then 10000
     else 0

#
# implicit access here just from the motorroad tag
# (implicit access rules from highway tag handled elsewhere)
#
assign defaultaccess =
       if access= then not motorroad=yes
       else if access=private|no then false
       else true

#
# calculate logical bike access
#
assign bikeaccess =
       # Only allow footways with "Radverkehr frei" (Germany) when it is a bridge (good shortcut). Those ways in most cases are quite narrow and not eligible for riding your normal speed.
       if and highway=footway ( or bicycle=yes bicycle=designated ) then true
       else if highway=footway then false
       else if bicycle= then
       (
         if bicycle_road=yes then true
         else if vehicle= then ( if highway=footway then false else defaultaccess )
         else not vehicle=private|no
       )
       else not bicycle=private|no|dismount

#
# calculate logical foot access
#
assign footaccess =
       if bikeaccess then true
       else if bicycle=dismount then true
       else if foot= then defaultaccess
       else not foot=private|no

#
# if not bike-, but foot-acess, add a high penalty to avoid them (9000 to still be able to access if there is no other choice!), otherwise access is forbidden
#
assign accesspenalty =
       if bikeaccess then 0
       else if footaccess then 9999
       else 10000

#
# If allow_badoneway is true we are allowed to use bad oneway streets, the police will take care ;-)
#
assign badoneway =
  if ( and reversedirection=yes oneway=yes|true|1 ) then true else false

assign onewaypenalty =
       if ( badoneway ) then
         if ( allow_badoneway ) then
           if ( highway=motorway|motorway_link              ) then 3
           else if ( highway=primary|primary_link              ) then 1.2
           else if ( highway=secondary|secondary_link          ) then 1.2
           else if ( highway=tertiary|tertiary_link            ) then 1.2
           else 1
         else 9999
       else 0

#
# calculate the cost-factor, which is the factor
# by which the distance of a way-segment is multiplied
# to calculate the cost of that segment. The costfactor
# must be >=1 and it's supposed to be close to 1 for
# the type of way the routing profile is searching for
#
assign smoothness_penalty =
    if smoothness=excellent|very_good|good|intermediate then 0.0
    else if smoothness=bad|robust_wheels|very_bad|high_clearance|horrible|off_road_wheels|very_horrible|impassable then 9999
    else 0.1

assign lanes_penalty =
  if lanes=1 then 0.5
  else if lanes=2 then 0.2
  else if lanes=3|4|5|6 then 0
  else 2

assign costfactor

  #
  # exclude rivers, rails etc.
  #
  if ( and highway= not route=ferry ) then 10000

  #
  # all other exclusions below (access, steps, ferries,..)
  # should not be deleted by the decoder, to be available
  # in voice-hint-processing
  #
  else min 9999

  #
  # apply oneway-and access-penalties
  #
  add onewaypenalty
  add smoothness_penalty
  add lanes_penalty

  #
  # some other highway types
  #
  if      ( or highway=living_street living_street=yes ) then 500
  else if ( highway=residential                        ) then 50
  else if ( highway=unclassified                       ) then 50
  # Only allow footways with "Radverkehr frei" (Germany) at high costs when it is not a bridge/tunnel (good shortcut). Those ways in most cases are quite narrow and not eligible for riding your normal speed.
  else if ( and highway=footway and ( or bicycle=yes bicycle=designated ) ( or bridge=yes tunnel=yes ) ) then 100
  else if ( highway=pedestrian                         ) then 20
  else if ( highway=footway                            ) then 9999
  else if ( highway=bridleway                          ) then 9999
  else if ( highway=cycleway                           ) then 9999
  else if ( highway=service                            ) then 9999
  else if ( highway=construction                       ) then 9999
  else if ( highway=proposed|abandoned                 ) then 10000
  else if ( highway=steps                              ) then 10000
  else if ( route=ferry                                ) then 10000

  #
  # tracks and track-like ways are rated mainly be tracktype/grade
  # But note that if no tracktype is given (mainly for road/path/footway)
  # it can be o.k. if there's any other hint for quality
  #
  else if ( highway=track|road|path|footway ) then
  (
    if      ( tracktype=grade1 ) then ( if probablyGood then 20 else 9999 )
    else 9999
  )

  #
  # NO traffic penalty for ways with high car traffic, we want to be seen!
  # This profile will stick to large and heavily used roads
  # See https://forum.openstreetmap.org/viewtopic.php?id=31044 for more information
  #
    else if ( and allow_motorway highway=motorway|motorway_link ) then 1.0
    else if ( highway=trunk|trunk_link ) then 1.0
    else if highway=primary|primary_link then 1.5
    else if highway=secondary|secondary_link then 1.4
    else if highway=tertiary|tertiary_link then 4.9

  #
  # default for any other highway type not handled above
  #
  else 20.0

# way priorities used for voice hint generation

assign priorityclassifier =

  if      ( highway=motorway                          ) then  30
  else if ( highway=motorway_link                     ) then  29
  else if ( highway=trunk                             ) then  28
  else if ( highway=trunk_link                        ) then  27
  else if ( highway=primary                           ) then  26
  else if ( highway=primary_link                      ) then  25
  else if ( highway=secondary                         ) then  24
  else if ( highway=secondary_link                    ) then  23
  else if ( highway=tertiary                          ) then  22
  else if ( highway=tertiary_link                     ) then  21
  else if ( highway=unclassified                      ) then  20
  else if ( or highway=living_street living_street=yes ) then  6
  else if ( highway=service                           ) then  6
  else if ( highway=cycleway                          ) then  6
  else if ( or bicycle=designated bicycle_road=yes    ) then  6
  else if ( highway=track                             ) then if tracktype=grade1 then 6 else 4
  else if ( highway=bridleway|road|path|footway       ) then  4
  else if ( highway=steps                             ) then  2
  else if ( highway=pedestrian                        ) then  2
  else 0

# some more classifying bits used for voice hint generation...

assign isbadoneway = not equal onewaypenalty 0
assign isgoodoneway = if reversedirection=yes then oneway=-1
                      else if oneway= then junction=roundabout else oneway=yes|true|1
assign isroundabout = junction=roundabout
assign islinktype = highway=motorway_link|trunk_link|primary_link|secondary_link|tertiary_link
assign isgoodforcars = if greater priorityclassifier 6 then true
                  else if ( or or highway=living_street living_street=yes highway=service ) then true
                  else if ( and highway=track tracktype=grade1 ) then true
                  else false

# ... encoded into a bitmask

assign classifiermask add          isbadoneway
                      add multiply isgoodoneway   2
                      add multiply isroundabout   4
                      add multiply islinktype     8
                          multiply isgoodforcars 16

# include `smoothness=` tags in the response's WayTags for track analysis
assign dummyUsage = smoothness=

---context:node  # following code refers to node tags

assign   initial_cost_node    0

assign defaultaccess =
       if ( access= ) then true # add default barrier restrictions here!
       else if ( access=private|no ) then false
       else true

assign bikeaccess =
       if nodeaccessgranted=yes then true
       else if bicycle= then
       (
         if vehicle= then defaultaccess
         else not vehicle=private|no
       )
       else not bicycle=private|no|dismount

assign footaccess =
       if bicycle=dismount then true
       else if foot= then defaultaccess
       else not foot=private|no

#
# Avoid barriers
#
assign initialcost =
       add ( if barrier=cycle_barrier then 9999
         else initial_cost_node )
       if bikeaccess then 0
       else ( if footaccess then 9999 else 10000 )
